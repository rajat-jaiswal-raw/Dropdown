{"version":3,"sources":["Search/Search.js","Dropdown/Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","state","inputStr","searchStr","bind","insertObject","handelChange","placeholder","className","name","value","onChange","this","evt","setState","target","str","lowerStr","toLocaleLowerCase","indexList","addedIndex","Set","searchKey","getIndexes","forEach","key","dataList","index","has","toLowerCase","includes","push","add","searchIcon","alignSearchIcon","getIcon","getInputElement","Component","defaultProps","Dropdown","selected","allOptionList","Array","length","keys","optionList","showOptions","renderOptionList","renderOptionElement","setSelected","toggleShowOptions","handleClickOutside","document","addEventListener","removeEventListener","textContent","searchResult","event","wrapperRef","contains","headContent","onClick","role","aria-hidden","displayKey","allElements","element","option","ref","node","renderDropdownHead","rendersearchElement","App","a","b","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d25e44bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './Search.css';\n/**\n * A react component which will take dataList and searchKey\n * and it will search the query in dataList.\n */\nclass Search extends Component {\n  /**\n   * Constructor for Search component.\n   * @param {*} props - React props.\n   */\n  constructor(props) {\n    super(props);\n    this.state = { inputStr: '' };\n    this.searchStr = this.searchStr.bind(this);\n    this.insertObject = this.insertObject.bind(this);\n    this.handelChange = this.handelChange.bind(this);\n  }\n\n  /**\n   * It will return font awsome search icon.\n   * @returns {JSX} - A search icon.\n   */\n  static getIcon() {\n    return <i className=\"fa fa-search Search-search-icon\" />;\n  }\n\n  /**\n   * Returns an input element.\n   * @param {String} inputStr - value for input element\n   * @param {String} placeholder - placeHolder for input element\n   * @param {JSX} - An input element.\n   */\n  getInputElement(inputStr, placeholder) {\n    return (\n      <input\n        className=\"Search-input-field\"\n        name=\"inputStr\"\n        value={inputStr}\n        onChange={this.handelChange}\n        placeholder={placeholder}\n      />\n    );\n  }\n\n  /**\n   * It updates the value of Input element and searches for the value.\n   * @param {Event} evt - A react event.\n   */\n  handelChange(evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n    this.searchStr(evt.target.value);\n  }\n\n  /**\n   * It will search given string in dataList.\n   * @param {String} str - Search string.\n   */\n  searchStr(str) {\n    const lowerStr = str.toLocaleLowerCase();\n    const indexList = [];\n    const addedIndex = new Set();\n    const { searchKey, getIndexes } = this.props;\n    searchKey.forEach(key => {\n      this.insertObject(indexList, addedIndex, key, lowerStr);\n    });\n    getIndexes(indexList);\n  }\n\n  /**\n   * It will append the index of objects which have str in the value of key\n   * @param {Array} indexList - List of index of objects which are already selected.\n   * @param {Set} addedIndex - Set of index of selected objects.\n   * @param {String} key - The property of object where we have to search.\n   * @param {String} str - The string which we have to search.\n   */\n  insertObject(indexList, addedIndex, key, str) {\n    const { dataList } = this.props;\n    dataList.forEach((value, index) => {\n      if (!addedIndex.has(index) && value[key] && value[key].toLowerCase().includes(str)) {\n        indexList.push(index);\n        addedIndex.add(index);\n      }\n    });\n  }\n\n  /**\n   * render method of Search component.\n   */\n  render() {\n    const { inputStr } = this.state;\n    const { placeholder, searchIcon, alignSearchIcon } = this.props;\n    return (\n      <div className=\"Search\">\n        <div className=\"Search-input\">\n          {searchIcon && alignSearchIcon === 'left' && Search.getIcon()}\n          {this.getInputElement(inputStr, placeholder)}\n          {searchIcon && alignSearchIcon === 'right' && Search.getIcon()}\n        </div>\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  /** Array of objects where we have to perform search.\n   * */\n  dataList       : PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  /**\n   * A function which will get an array of index of dataList objects as a parameter.\n   */\n  getIndexes     : PropTypes.func.isRequired,\n  /** Array of keys in which we have to search.\n   * */\n  searchKey      : PropTypes.arrayOf(PropTypes.string).isRequired,\n  /** Placeholder for input element.\n   * - Default - ```Search Something```\n   * */\n  placeholder    : PropTypes.string,\n  /** Display search icon or not.\n   * - Options - ```true``` | ```false```\n   * - Default - ```false```\n   * */\n  searchIcon     : PropTypes.bool,\n  /** Alignment of search icon.\n   * - Options - ```left``` | ```right```\n   * - Default - ```left```\n   * */\n  alignSearchIcon: PropTypes.string\n};\n\nSearch.defaultProps = {\n  placeholder    : 'Search',\n  searchIcon     : false,\n  alignSearchIcon: 'left'\n};\n\nexport default Search;\n","import React, { Component } from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\nimport Search from '../Search/Search';\nimport './Dropdown.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n/**\n * A react component which will take dataList and searchKey\n * and it will search the query in dataList.\n */\nclass Dropdown extends Component {\n  /**\n   * Constructor for Search component.\n   * @param {*} props - React props.\n   */\n  constructor(props) {\n    super(props);\n    const { dataList } = this.props;\n    this.state = {\n      selected     : '',\n      allOptionList: [...Array(dataList.length).keys()],\n      optionList   : [],\n      showOptions  : false\n    };\n    this.renderOptionList = this.renderOptionList.bind(this);\n    this.renderOptionElement = this.renderOptionElement.bind(this);\n    this.setSelected = this.setSelected.bind(this);\n    this.toggleShowOptions = this.toggleShowOptions.bind(this);\n    this.getIndexes = this.getIndexes.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  /**\n   * It will add event listener outside the component.\n   */\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n  }\n\n  /**\n   * It will remove event listener outside the component.\n   */\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  /**\n   * It will update the selected value as well as removes all the options.\n   * @param {Event} evt - A react event.\n   */\n  setSelected(evt) {\n    const { textContent } = evt.target;\n    this.setState({ selected: textContent, showOptions: false });\n  }\n\n  /**\n   * Updates the optionList state.\n   * @param {Array} searchResult - List of indexes from search component.\n   */\n  getIndexes(searchResult) {\n    this.setState({ optionList: searchResult });\n  }\n\n  /**\n   * When clicked outside the component it will collapse\n   * @param {Event} event - A react event.\n   */\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.setState({ showOptions: false });\n    }\n  }\n\n  /**\n   * Changes showOptions state.\n   * If new value of showOptions is true then all the indexes are pushed into optionList.\n   */\n  toggleShowOptions() {\n    const { showOptions, allOptionList } = this.state;\n    if (showOptions) {\n      this.setState({ showOptions: false });\n    } else {\n      this.setState({ showOptions: true, optionList: [...allOptionList] });\n    }\n  }\n\n  /**\n   * It will allow us to search the values in dataList.\n   * @returns {JSX} - A Search component.\n   */\n  rendersearchElement() {\n    const { dataList, searchKey } = this.props;\n    return (\n      <div className=\"Dropdown-search\">\n        <Search dataList={dataList} searchKey={searchKey} getIndexes={this.getIndexes} searchIcon />\n      </div>\n    );\n  }\n\n  /**\n   * Returns Dropdown head element with either selected option or placeholder in it.\n   * @returns {JSX} - Dropdown head element.\n   */\n  renderDropdownHead() {\n    const { selected } = this.state;\n    const { placeholder } = this.props;\n    const headContent = selected.length ? selected : placeholder;\n    return (\n      <div\n        className=\"Dropdown-head Dropdown-border-style\"\n        onClick={this.toggleShowOptions}\n        role=\"presentation\"\n      >\n        <div className=\"Dropdown-head-selected\">{headContent}</div>\n        <i className=\"fa fa-caret-down Dropdown-triangle-icon\" aria-hidden=\"true\" />\n      </div>\n    );\n  }\n\n  /**\n   * Return all the available options.\n   * @returns {JSX} - All the option elements.\n   */\n  renderOptionList() {\n    const { optionList } = this.state;\n    const { dataList, displayKey } = this.props;\n    const allElements = [];\n    optionList.forEach(element => {\n      const textContent = dataList[element][displayKey];\n      if (textContent) {\n        allElements.push(this.renderOptionElement(textContent));\n      }\n    });\n    return allElements;\n  }\n\n  /**\n   * An option which is at index in dataList.\n   * @param {number} index - Index of option in dataList.\n   * @returns {JSX} - An option element.\n   */\n  renderOptionElement(option) {\n    return (\n      <div className=\"Dropdown-option\" onClick={this.setSelected} role=\"presentation\">\n        {option}\n      </div>\n    );\n  }\n\n  /**\n   * render method of Dropdown component.\n   */\n  render() {\n    const { showOptions } = this.state;\n    return (\n      <div\n        ref={node => {\n          this.wrapperRef = node;\n        }}\n        className=\"Dropdown\"\n      >\n        {this.renderDropdownHead()}\n        {showOptions && (\n          <div className=\"Dropdown-menu Dropdown-border-style\">\n            {this.rendersearchElement()}\n            <div className=\"Dropdown-all-options\">{this.renderOptionList()}</div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  /** Array of objects where we have to perform search.\n   * */\n  dataList   : PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  /** Array of keys in which we have to search.\n   * */\n  searchKey  : PropTypes.arrayOf(PropTypes.string).isRequired,\n  /** Placeholder for dropdown element.\n   * - Default - ```Select```\n   * */\n  placeholder: PropTypes.string,\n  /**\n   * The key whose value will be in optionList.\n   */\n  displayKey : PropTypes.string.isRequired\n};\n\nDropdown.defaultProps = {\n  placeholder: 'Select'\n};\n\nexport default Dropdown;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { PureComponent } from 'react';\nimport Dropdown from './Dropdown/Dropdown';\nimport './App.css';\n\n/**\n * App component to render all the components.\n */\nclass App extends PureComponent {\n  /**\n   * constructor for App component.\n   * @param {*} props React props.\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataList: [\n        { a: 'abracadbra', b: '2' },\n        { a: 'zzz', b: 'abracadbra' },\n        { a: 'abracadbra', b: '2' },\n        { a: 'zzz', b: 'abracadbra' },\n        { a: 'abracadbra', b: '2' },\n        { a: 'zzz', b: 'abracadbra' },\n        { a: 'abracadbra', b: '2' },\n        { a: 'zzz', b: 'abracadbra' },\n        { a: 'abracadbra', b: '2' },\n        { a: 'zzz', b: 'abracadbra' },\n        { a: 'abracadbra', b: '2' },\n        { a: 'zzz', b: 'abracadbra' }\n      ],\n      searchKey: ['a']\n    };\n  }\n\n  /**\n   * render method for App component.\n   */\n  render() {\n    const { dataList, searchKey } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"abc\">\n          <Dropdown dataList={dataList} searchKey={searchKey} displayKey=\"a\" />\n        </div>\n        <br />\n        <div className=\"abc\">\n          <Dropdown dataList={dataList} searchKey={searchKey} displayKey=\"b\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}